{
	"name": "PythonVisualization",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "internship",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8636ec82-fb98-4d31-aeb3-708cd4e91ae4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"c19a531c-0b86-41a5-a974-25fc7b44202a": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1970",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "10752971",
										"6": "Afghani",
										"7": "164",
										"8": "8.69917407E8",
										"10": "4.6793902E7",
										"11": "1.65618722E8",
										"12": "1.663221269E9",
										"13": "1.12126986E8",
										"14": "9.4611818E7",
										"15": "9.4611818E7",
										"16": "1.551094283E9",
										"17": "1.95277226E8",
										"18": "3.70146827E8",
										"19": "3.76690811E8",
										"20": "1.27747843E8",
										"21": "1.731454254E9",
										"22": "8.39172E7",
										"23": "2.26387091E8",
										"24": "1.766527525E9",
										"25": "1.731435587E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1971",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "11015857",
										"6": "Afghani",
										"7": "168",
										"8": "9.10828104E8",
										"10": "4.8994113E7",
										"11": "1.935803E8",
										"12": "1.79654124E9",
										"13": "1.21114833E8",
										"14": "9.901235E7",
										"15": "9.901235E7",
										"16": "1.675426407E9",
										"17": "2.7629648E8",
										"18": "3.87549502E8",
										"19": "3.94401164E8",
										"20": "1.33754097E8",
										"21": "1.812857077E9",
										"22": "8.7860382E7",
										"23": "2.37019196E8",
										"24": "1.850121913E9",
										"25": "1.812837521E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1972",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "11286753",
										"6": "Afghani",
										"7": "149",
										"8": "8.2794534E8",
										"10": "4.4535223E7",
										"11": "2.2765438E8",
										"12": "1.607159399E9",
										"13": "1.08347543E8",
										"14": "1.03456794E8",
										"15": "1.03456794E8",
										"16": "1.498811856E9",
										"17": "2.9037035E8",
										"18": "3.52284669E8",
										"19": "3.58512865E8",
										"20": "1.21582672E8",
										"21": "1.647917912E9",
										"22": "7.9864525E7",
										"23": "2.15477287E8",
										"24": "1.683947905E9",
										"25": "1.647900178E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1973",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "11575305",
										"6": "Afghani",
										"7": "150",
										"8": "8.55486925E8",
										"10": "4.6018542E7",
										"11": "2.26913554E8",
										"12": "1.617037233E9",
										"13": "1.09013455E8",
										"14": "1.21728433E8",
										"15": "1.21728433E8",
										"16": "1.5080238E9",
										"17": "2.6296288E8",
										"18": "3.64010279E8",
										"19": "3.70445793E8",
										"20": "1.25630236E8",
										"21": "1.702734673E9",
										"22": "8.2528885E7",
										"23": "2.22624293E8",
										"24": "1.739998153E9",
										"25": "1.702716294E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1974",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "11869879",
										"6": "Afghani",
										"7": "177",
										"8": "1.035913365E9",
										"10": "5.5721659E7",
										"11": "2.84938449E8",
										"12": "1.907408182E9",
										"13": "1.28588961E8",
										"14": "1.75061875E8",
										"15": "1.75061875E8",
										"16": "1.778819221E9",
										"17": "3.05679151E8",
										"18": "4.40760406E8",
										"19": "4.4855279E8",
										"20": "1.52119162E8",
										"21": "2.06175151E9",
										"22": "9.9918604E7",
										"23": "2.6952591E8",
										"24": "2.106420227E9",
										"25": "2.061729287E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1975",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "12157386",
										"6": "Afghani",
										"7": "195",
										"8": "1.165441381E9",
										"10": "6.2686658E7",
										"11": "3.00493815E8",
										"12": "2.131358499E9",
										"13": "1.43686711E8",
										"14": "2.21728484E8",
										"15": "2.21728484E8",
										"16": "1.987671788E9",
										"17": "3.33827202E8",
										"18": "4.95891889E8",
										"19": "5.04659018E8",
										"20": "1.71142804E8",
										"21": "2.319778374E9",
										"22": "1.12416374E8",
										"23": "3.03432162E8",
										"24": "2.369877014E9",
										"25": "2.319753506E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1976",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "12425267",
										"6": "Afghani",
										"7": "207",
										"8": "1.262891632E9",
										"10": "6.7941997E7",
										"11": "3.29382802E8",
										"12": "2.232098998E9",
										"13": "1.50478171E8",
										"14": "3.22716302E8",
										"15": "3.22716302E8",
										"16": "2.081620805E9",
										"17": "3.70617399E8",
										"18": "5.37391228E8",
										"19": "5.46891983E8",
										"20": "1.85472327E8",
										"21": "2.51360806E9",
										"22": "1.21865126E8",
										"23": "3.28544951E8",
										"24": "2.568148611E9",
										"25": "2.513580659E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1977",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "12687301",
										"6": "Afghani",
										"7": "231",
										"8": "1.439687056E9",
										"10": "7.7430595E7",
										"11": "3.42962988E8",
										"12": "2.58419855E9",
										"13": "1.74215156E8",
										"14": "3.62716078E8",
										"15": "3.62716078E8",
										"16": "2.409983394E9",
										"17": "4.24938409E8",
										"18": "6.12470141E8",
										"19": "6.23298276E8",
										"20": "2.11382277E8",
										"21": "2.864969897E9",
										"22": "1.38798518E8",
										"23": "3.74373152E8",
										"24": "2.927408257E9",
										"25": "2.864939207E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1978",
										"3": "0.044998427",
										"4": "0.044998427",
										"5": "12938862",
										"6": "Afghani",
										"7": "254",
										"8": "1.61873187E9",
										"10": "8.7058287E7",
										"11": "3.54814847E8",
										"12": "2.883951161E9",
										"13": "1.94423174E8",
										"14": "4.37531071E8",
										"15": "4.37531071E8",
										"16": "2.689527987E9",
										"17": "4.53333379E8",
										"18": "6.88846878E8",
										"19": "7.01025415E8",
										"20": "2.37719665E8",
										"21": "3.222997856E9",
										"22": "1.56155903E8",
										"23": "4.22306672E8",
										"24": "3.292593311E9",
										"25": "3.222963833E9"
									},
									{
										"0": "4",
										"1": "Afghanistan",
										"2": "1979",
										"3": "0.043730753",
										"4": "0.043730753",
										"5": "12986369",
										"6": "Afghani",
										"7": "285",
										"8": "1.824507919E9",
										"10": "9.8215848E7",
										"11": "4.24287344E8",
										"12": "3.241236374E9",
										"13": "2.1850973E8",
										"14": "4.87588175E8",
										"15": "4.87588175E8",
										"16": "3.022726644E9",
										"17": "5.22344151E8",
										"18": "7.76522761E8",
										"19": "7.90251109E8",
										"20": "2.68036272E8",
										"21": "3.630809406E9",
										"22": "1.76271742E8",
										"23": "4.73526514E8",
										"24": "3.707542111E9",
										"25": "3.630767856E9"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "CountryID",
										"type": "string"
									},
									{
										"key": "1",
										"name": "Country",
										"type": "string"
									},
									{
										"key": "2",
										"name": "Year",
										"type": "string"
									},
									{
										"key": "3",
										"name": "AMA exchange rate",
										"type": "string"
									},
									{
										"key": "4",
										"name": "IMF based exchange rate",
										"type": "string"
									},
									{
										"key": "5",
										"name": "Population",
										"type": "string"
									},
									{
										"key": "6",
										"name": "Currency",
										"type": "string"
									},
									{
										"key": "7",
										"name": "Per capita GNI",
										"type": "string"
									},
									{
										"key": "8",
										"name": "Agriculture, hunting, forestry, fishing (ISIC A-B)",
										"type": "string"
									},
									{
										"key": "9",
										"name": "Changes in inventories",
										"type": "string"
									},
									{
										"key": "10",
										"name": "Construction (ISIC F)",
										"type": "string"
									},
									{
										"key": "11",
										"name": "Exports of goods and services",
										"type": "string"
									},
									{
										"key": "12",
										"name": "Final consumption expenditure",
										"type": "string"
									},
									{
										"key": "13",
										"name": "General government final consumption expenditure",
										"type": "string"
									},
									{
										"key": "14",
										"name": "Gross capital formation",
										"type": "string"
									},
									{
										"key": "15",
										"name": "Gross fixed capital formation (including Acquisitions less disposals of valuables)",
										"type": "string"
									},
									{
										"key": "16",
										"name": "Household consumption expenditure (including Non-profit institutions serving households)",
										"type": "string"
									},
									{
										"key": "17",
										"name": "Imports of goods and services",
										"type": "string"
									},
									{
										"key": "18",
										"name": "Manufacturing (ISIC D)",
										"type": "string"
									},
									{
										"key": "19",
										"name": "Mining, Manufacturing, Utilities (ISIC C-E)",
										"type": "string"
									},
									{
										"key": "20",
										"name": "Other Activities (ISIC J-P)",
										"type": "string"
									},
									{
										"key": "21",
										"name": "Total Value Added",
										"type": "string"
									},
									{
										"key": "22",
										"name": "Transport, storage and communication (ISIC I)",
										"type": "string"
									},
									{
										"key": "23",
										"name": "Wholesale, retail trade, restaurants and hotels (ISIC G-H)",
										"type": "string"
									},
									{
										"key": "24",
										"name": "Gross National Income(GNI) in USD",
										"type": "string"
									},
									{
										"key": "25",
										"name": "Gross Domestic Product (GDP)",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala",
							"wranglerEntryContext": {
								"dataframeType": "pyspark"
							}
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9b7056b5-7a48-4d34-af2a-fbfdb32511ad/resourceGroups/GlobalEconomyIndicators/providers/Microsoft.Synapse/workspaces/global-economy-indicator-sa/bigDataPools/internship",
				"name": "internship",
				"type": "Spark",
				"endpoint": "https://global-economy-indicator-sa.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/internship",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load(path='abfss://global-economy-indicators-data@globaleconomyindicators.dfs.core.windows.net/transformed-data/indicators/part-00000-tid-8109756532729835153-e7d859b9-b48c-4a03-97c5-1c9192507ce4-6-1-c000.csv', format='csv',header=True)\r\n",
					"display(df.limit (10))   \r\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install opendatasets\r\n",
					"import opendatasets as od"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import numpy as np\r\n",
					"import pandas as pd\r\n",
					"import seaborn as sns\r\n",
					"import matplotlib as pt\r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import os"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"project_name = \"Global_Economy_Indicators\""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import seaborn as sns\r\n",
					"import matplotlib\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"%matplotlib inline\r\n",
					"\r\n",
					"sns.set_style('darkgrid')\r\n",
					"matplotlib.rcParams['font.size'] = 14\r\n",
					"matplotlib.rcParams['figure.figsize'] = (9, 5)\r\n",
					"matplotlib.rcParams['figure.facecolor'] = '#00000000'"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<mark>Calculate total exports of goods and services by each country using python matplotlib</mark>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"def plot_total_exports(df, title=\"Total Exports of Goods and Services by Country\"):\r\n",
					"    \"\"\"Calculates and plots total exports using matplotlib.\r\n",
					"\r\n",
					"    Args:\r\n",
					"        df: Pandas DataFrame with 'Country' and 'Exports_of_goods_and_services' columns.\r\n",
					"        title: Title for the plot.\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        None. Displays the plot.  Prints an error message and returns if the input is invalid.\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    if not isinstance(df, pd.DataFrame):\r\n",
					"        print(\"Error: Input must be a Pandas DataFrame.\")\r\n",
					"        return\r\n",
					"\r\n",
					"    if 'Exports_of_goods_and_services' not in df.columns or 'Country' not in df.columns:\r\n",
					"        print(\"Error: DataFrame must contain 'Country' and 'Exports_of_goods_and_services' columns.\")\r\n",
					"        return\r\n",
					"\r\n",
					"    try:\r\n",
					"        total_exports = df.groupby('Country')['Exports_of_goods_and_services'].sum().reset_index()\r\n",
					"        total_exports = total_exports.sort_values('Exports_of_goods_and_services', ascending=False)\r\n",
					"\r\n",
					"        plt.figure(figsize=(12, 6))  # Adjust figure size for better readability\r\n",
					"        plt.bar(total_exports['Country'], total_exports['Exports_of_goods_and_services'])\r\n",
					"        plt.xlabel(\"Country\", fontsize=12)\r\n",
					"        plt.ylabel(\"Total Exports\", fontsize=12)\r\n",
					"        plt.title(title, fontsize=14)\r\n",
					"        plt.xticks(rotation=45, ha='right', fontsize=10)  # Rotate x-axis labels for readability\r\n",
					"        plt.tight_layout() # Adjust layout to prevent labels from overlapping\r\n",
					"        plt.show()\r\n",
					"\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"An error occurred during calculation or plotting: {e}\")\r\n",
					"        return\r\n",
					"\r\n",
					"\r\n",
					"# Example usage (replace with your actual data loading):\r\n",
					"try:\r\n",
					"    df = pd.read_csv(\"your_data.csv\")  # Replace \"your_data.csv\" with your file path\r\n",
					"    plot_total_exports(df) # Call the function to plot the data\r\n",
					"\r\n",
					"    # Example with custom title:\r\n",
					"    plot_total_exports(df, title=\"Global Exports by Country (USD)\")\r\n",
					"\r\n",
					"\r\n",
					"except FileNotFoundError:\r\n",
					"    print(\"Error: CSV file not found. Please provide a valid file path.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"An error occurred: {e}\")\r\n",
					"\r\n",
					"# Example with sample data (for testing):\r\n",
					"data = [\r\n",
					"    {'Country': 'USA', 'Exports_of_goods_and_services': 1000},\r\n",
					"    {'Country': 'Canada', 'Exports_of_goods_and_services': 500},\r\n",
					"    {'Country': 'USA', 'Exports_of_goods_and_services': 1200},\r\n",
					"    {'Country': 'Mexico', 'Exports_of_goods_and_services': 700},\r\n",
					"    {'Country': 'Japan', 'Exports_of_goods_and_services': 900},\r\n",
					"    {'Country': 'Germany', 'Exports_of_goods_and_services': 1100},\r\n",
					"    {'Country': 'UK', 'Exports_of_goods_and_services': 800},\r\n",
					"    {'Country': 'France', 'Exports_of_goods_and_services': 600},\r\n",
					"    {'Country': 'China', 'Exports_of_goods_and_services': 1300}\r\n",
					"]\r\n",
					"\r\n",
					"df_sample = pd.DataFrame(data)\r\n",
					"plot_total_exports(df_sample, title=\"Sample Exports Data\") # Plot the sample data\r\n",
					"\r\n",
					"\r\n",
					"# Example of error handling:\r\n",
					"empty_df = pd.DataFrame()\r\n",
					"plot_total_exports(empty_df)  # Will print error message\r\n",
					"\r\n",
					"invalid_df = pd.DataFrame({'Country': ['USA', 'Canada'], 'SomeOtherColumn': [1, 2]})\r\n",
					"plot_total_exports(invalid_df) # Will print error message\r\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<mark>Show countries construction year using seaborn</mark>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import seaborn as sns\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"def plot_construction_years(df, title=\"Construction Years by Country\"):\r\n",
					"    \"\"\"Plots construction years by country using Seaborn.\r\n",
					"\r\n",
					"    Args:\r\n",
					"        df: Pandas DataFrame with 'Country' and 'Construction_ISIC_F' columns.\r\n",
					"        title: Title for the plot.\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        None. Displays the plot.  Prints an error message and returns if the input is invalid.\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    if not isinstance(df, pd.DataFrame):\r\n",
					"        print(\"Error: Input must be a Pandas DataFrame.\")\r\n",
					"        return\r\n",
					"\r\n",
					"    if 'Construction_ISIC_F' not in df.columns or 'Country' not in df.columns:\r\n",
					"        print(\"Error: DataFrame must contain 'Country' and 'Construction_ISIC_F' columns.\")\r\n",
					"        return\r\n",
					"\r\n",
					"    try:\r\n",
					"        plt.figure(figsize=(12, 6))  # Adjust figure size as needed\r\n",
					"        sns.countplot(x='Country', data=df, hue='Construction_ISIC_F') # Use countplot for categorical data\r\n",
					"        plt.xlabel(\"Country\", fontsize=12)\r\n",
					"        plt.ylabel(\"Count\", fontsize=12)\r\n",
					"        plt.title(title, fontsize=14)\r\n",
					"        plt.xticks(rotation=45, ha='right', fontsize=10)\r\n",
					"        plt.tight_layout()\r\n",
					"        plt.show()\r\n",
					"\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"An error occurred during plotting: {e}\")\r\n",
					"        return\r\n",
					"\r\n",
					"\r\n",
					"# Example usage (replace with your actual data loading):\r\n",
					"try:\r\n",
					"    df = pd.read_csv(\"your_data.csv\")  # Replace \"your_data.csv\" with your file path\r\n",
					"    plot_construction_years(df)\r\n",
					"\r\n",
					"    # Example with custom title:\r\n",
					"    plot_construction_years(df, title=\"Construction Activity by Country\")\r\n",
					"\r\n",
					"except FileNotFoundError:\r\n",
					"    print(\"Error: CSV file not found. Please provide a valid file path.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"An error occurred: {e}\")\r\n",
					"\r\n",
					"\r\n",
					"# Example with sample data (for testing):\r\n",
					"data = [\r\n",
					"    {'Country': 'USA', 'Construction_ISIC_F': 2020},\r\n",
					"    {'Country': 'Canada', 'Construction_ISIC_F': 2020},\r\n",
					"    {'Country': 'USA', 'Construction_ISIC_F': 2021},\r\n",
					"    {'Country': 'Mexico', 'Construction_ISIC_F': 2020},\r\n",
					"    {'Country': 'USA', 'Construction_ISIC_F': 2022},\r\n",
					"    {'Country': 'Canada', 'Construction_ISIC_F': 2021},\r\n",
					"    {'Country': 'Mexico', 'Construction_ISIC_F': 2021},\r\n",
					"    {'Country': 'Japan', 'Construction_ISIC_F': 2022},\r\n",
					"    {'Country': 'Germany', 'Construction_ISIC_F': 2021},\r\n",
					"    {'Country': 'UK', 'Construction_ISIC_F': 2020},\r\n",
					"    {'Country': 'France', 'Construction_ISIC_F': 2022},\r\n",
					"    {'Country': 'China', 'Construction_ISIC_F': 2020}\r\n",
					"]\r\n",
					"\r\n",
					"df_sample = pd.DataFrame(data)\r\n",
					"plot_construction_years(df_sample, title=\"Sample Construction Data\")\r\n",
					"\r\n",
					"\r\n",
					"# Example of error handling:\r\n",
					"empty_df = pd.DataFrame()\r\n",
					"plot_construction_years(empty_df)  # Will print error message\r\n",
					"\r\n",
					"invalid_df = pd.DataFrame({'Country': ['USA', 'Canada'], 'SomeOtherColumn': [1, 2]})\r\n",
					"plot_construction_years(invalid_df) # Will print error message"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<mark>Show Population growth for countries for last 50 years using linechart</mark>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"# Sample Data (REPLACE THIS WITH YOUR ACTUAL DATA)\r\n",
					"data = {'Country': ['USA', 'Canada', 'UK', 'Germany', 'Japan'],\r\n",
					"        '1973': [210, 22, 56, 78, 108],  # Population in millions\r\n",
					"        '1983': [235, 25, 58, 80, 110],\r\n",
					"        '1993': [260, 28, 60, 82, 115],\r\n",
					"        '2003': [285, 32, 63, 83, 120],\r\n",
					"        '2013': [310, 35, 65, 84, 125],\r\n",
					"        '2023': [335, 38, 68, 83, 125]}\r\n",
					"df = pd.DataFrame(data).set_index('Country') # Set 'Country' as index\r\n",
					"\r\n",
					"# Transpose the DataFrame to have years as rows and countries as columns\r\n",
					"df_transposed = df.T\r\n",
					"\r\n",
					"# Plotting the line chart\r\n",
					"plt.figure(figsize=(12, 6))\r\n",
					"for country in df.index:\r\n",
					"    plt.plot(df_transposed.index, df_transposed[country], label=country)\r\n",
					"\r\n",
					"plt.xlabel('Year')\r\n",
					"plt.ylabel('Population (Millions)')\r\n",
					"plt.title('Population Growth Over 50 Years')\r\n",
					"plt.legend()\r\n",
					"plt.grid(True)\r\n",
					"plt.tight_layout()\r\n",
					"plt.show()\r\n",
					""
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"<mark>show country by gross national income in USD and imports goods and services for year 2020 using histogram </mark>\r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"import seaborn as sns  # For nicer plots\r\n",
					"\r\n",
					"# Sample Data (REPLACE THIS WITH YOUR ACTUAL DATA)\r\n",
					"data = {'Country': ['USA', 'Canada', 'UK', 'Germany', 'Japan', 'France', 'Australia', 'Brazil', 'India', 'China'],\r\n",
					"        'GNI': [65000, 50000, 45000, 52000, 48000, 47000, 55000, 15000, 2000, 12000],\r\n",
					"        'Imports': [25000, 18000, 20000, 22000, 19000, 17000, 21000, 8000, 1000, 5000]}\r\n",
					"df = pd.DataFrame(data)\r\n",
					"\r\n",
					"# 1. Scatter Plot (Recommended for two variables)\r\n",
					"plt.figure(figsize=(10, 6))  # Adjust figure size for better readability\r\n",
					"sns.scatterplot(x='GNI', y='Imports', data=df, hue='Country', s=50) # Hue adds color by country, s changes marker size\r\n",
					"plt.title('GNI vs. Imports (2020)')\r\n",
					"plt.xlabel('Gross National Income (USD)')\r\n",
					"plt.ylabel('Imports of Goods and Services (USD)')\r\n",
					"plt.grid(True)  # Add a grid for better visualization\r\n",
					"plt.tight_layout() # Adjust layout to prevent labels from overlapping\r\n",
					"#plt.legend(loc='upper left', bbox_to_anchor=(1,1)) # Place the legend outside the plot\r\n",
					"plt.show()\r\n",
					"\r\n",
					"# 2. 2D Histogram / Heatmap (Alternative for showing density)\r\n",
					"plt.figure(figsize=(10, 6))\r\n",
					"plt.hist2d(df['GNI'], df['Imports'], bins=(10,10), cmap='viridis') # Adjust bins for resolution\r\n",
					"plt.colorbar(label='Number of Countries')  # Add a colorbar\r\n",
					"plt.title('2D Histogram of GNI and Imports (2020)')\r\n",
					"plt.xlabel('Gross National Income (USD)')\r\n",
					"plt.ylabel('Imports of Goods and Services (USD)')\r\n",
					"plt.tight_layout()\r\n",
					"plt.show()\r\n",
					"\r\n",
					"\r\n",
					"# 3. Separate Histograms (If you want to look at distributions individually)\r\n",
					"plt.figure(figsize=(12, 5))\r\n",
					"\r\n",
					"plt.subplot(1, 2, 1) # 1 row, 2 columns, first plot\r\n",
					"sns.histplot(df['GNI'], kde=True) # KDE adds a Kernel Density Estimate\r\n",
					"plt.title('Distribution of GNI')\r\n",
					"\r\n",
					"plt.subplot(1, 2, 2) # 1 row, 2 columns, second plot\r\n",
					"sns.histplot(df['Imports'], kde=True)\r\n",
					"plt.title('Distribution of Imports')\r\n",
					"\r\n",
					"plt.tight_layout()\r\n",
					"plt.show()\r\n",
					"\r\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<mark>Show max GDP for last 50 years per country using barchart</mark>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"import seaborn as sns  # For nicer plots\r\n",
					"\r\n",
					"# Sample Data (REPLACE THIS WITH YOUR ACTUAL DATA)\r\n",
					"data = {'Country': ['USA', 'Canada', 'UK', 'Germany', 'Japan', 'France', 'Australia', 'Brazil', 'India', 'China'],\r\n",
					"        '1973': [10000, 4000, 5000, 6000, 7000, 5500, 4500, 2000, 800, 1500],\r\n",
					"        '1983': [12000, 4500, 5500, 7000, 8000, 6000, 5000, 2500, 1000, 2000],\r\n",
					"        '1993': [15000, 5000, 6000, 8000, 9000, 7000, 6000, 3000, 1200, 3000],\r\n",
					"        '2003': [18000, 6000, 7000, 9000, 10000, 8000, 7000, 4000, 1500, 5000],\r\n",
					"        '2013': [22000, 7000, 8000, 10000, 11000, 9000, 8000, 5000, 2000, 8000],\r\n",
					"        '2023': [25000, 8000, 9000, 11000, 12000, 10000, 9000, 6000, 2500, 12000]}\r\n",
					"df = pd.DataFrame(data).set_index('Country')\r\n",
					"\r\n",
					"# Find the maximum GDP for each country\r\n",
					"max_gdp = df.max(axis=1)\r\n",
					"\r\n",
					"# Plotting the bar chart\r\n",
					"plt.figure(figsize=(12, 6))\r\n",
					"sns.barplot(x=max_gdp.index, y=max_gdp.values)  # Use seaborn for better styling\r\n",
					"plt.xlabel('Country')\r\n",
					"plt.ylabel('Maximum GDP')\r\n",
					"plt.title('Maximum GDP per Country (Last 50 Years)')\r\n",
					"plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability if needed\r\n",
					"plt.tight_layout()\r\n",
					"plt.show()"
				],
				"execution_count": 22
			}
		]
	}
}