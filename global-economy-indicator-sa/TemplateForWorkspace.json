{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "global-economy-indicator-sa"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"global-economy-indicator-sa-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'global-economy-indicator-sa-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:global-economy-indicator-sa.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://globaleconomyindicators.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://globaleconomyindicators.dfs.core.windows.net/"
		},
		"global-economy-indicator-sa-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://globaleconomyindicators.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/global-economy-indicator-sa-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('global-economy-indicator-sa-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/global-economy-indicator-sa-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('global-economy-indicator-sa-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [CountryID]\n,[Country]\n,[Year]\n,[AMA_exchange_rate]\n,[IMF_based_exchange_rate]\n,[Population]\n,[Currency]\n,[Per_capita_GNI]\n,[Agriculture_hunting_forestry_fishing_ISIC_AB]\n,[Changes_in_inventories]\n,[Construction_ISIC_F]\n,[Exports_of_goods_and_services]\n,[Final_consumption_expenditure]\n,[General_government_final_consumption_expenditure]\n,[Gross_capital_formation]\n,[Gross_fixed_capital_formation_including_Acquisitions_less_disposals_of_valuables]\n,[Household_consumption_expenditure_including_Non_profit_institutions_serving_households]\n,[Imports_of_goods_and_services]\n,[Manufacturing_ISIC_D]\n,[Mining_Manufacturing_Utilities_ISIC_C_E]\n,[Other_Activities_ISIC_J_P]\n,[Total_Value_Added]\n,[Transport_storage_and_communication_ISIC_I]\n,[Wholesale_retail_trade_restaurants_and_hotels_ISIC_G_H]\n,[Gross_National_Income_GNI_in_USD]\n,[Gross_Domestic_Product_GDP]\n FROM [GlobaleconomyDB].[dbo].[indicators]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "GlobaleconomyDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--Calculate total exports of goods and services by each country: \n\nSELECT Country, SUM(Exports_of_goods_and_services) AS TotalExports\nFROM indicators\nGROUP BY Country  -- Important: Group by Country to get sums per country\nORDER BY TotalExports;\n\n-- show countries construction year:\nSELECT Country,Year,Construction_ISIC_F\nFROM indicators\nORDER BY Country,Year;\n\n-- show Population growth for countries for last 50 years:\n\nSELECT c1.Country,\n       c1.Year,\n       c1.Population,\n       (c1.Population - c2.Population) * 100.0 / c2.Population AS PopulationGrowthPercentage\nFROM indicators c1  -- Alias the table for easier referencing\nJOIN indicators c2 ON c1.Country = c2.Country AND c2.Year = (c1.Year - 1)  -- Join with the previous year's data\nWHERE c1.Year BETWEEN (SELECT MAX(Year) - 49 FROM indicators) AND (SELECT MAX(Year) FROM indicators) -- Last 50 years\nORDER BY c1.Country, c1.Year;\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "GlobaleconomyDB",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- show country by gross national income in USD and imports goods and services for year 2020: \nSELECT Country, Gross_National_Income_GNI_in_USD, Imports_of_goods_and_services\nFROM indicators\nwhere year IN (2020)\nORDER BY Country;\n\n\n-- show max GDP for last 50 years per country:\nSELECT Country, MAX(Gross_Domestic_Product_GDP) AS MaxGDP\nFROM indicators  \nWHERE Year >= (SELECT MAX(Year) - 49 FROM indicators)\nGROUP BY Country\nORDER BY MaxGDP DESC  \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "GlobaleconomyDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PythonVisualization')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "internship",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2d78a4a6-a41f-4ccd-9b50-9ef70ff8a2e0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/9b7056b5-7a48-4d34-af2a-fbfdb32511ad/resourceGroups/GlobalEconomyIndicators/providers/Microsoft.Synapse/workspaces/global-economy-indicator-sa/bigDataPools/internship",
						"name": "internship",
						"type": "Spark",
						"endpoint": "https://global-economy-indicator-sa.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/internship",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load(path='abfss://global-economy-indicators-data@globaleconomyindicators.dfs.core.windows.net/transformed-data/indicators/part-00000-tid-8109756532729835153-e7d859b9-b48c-4a03-97c5-1c9192507ce4-6-1-c000.csv', format='csv',header=True)\r\n",
							"display(df.limit (10))   \r\n",
							""
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"!pip install opendatasets\r\n",
							"import opendatasets as od"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"import seaborn as sns\r\n",
							"import matplotlib as pt\r\n",
							"import warnings\r\n",
							"warnings.filterwarnings(\"ignore\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd\r\n",
							"import os"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"project_name = \"Global_Economy_Indicators\""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import seaborn as sns\r\n",
							"import matplotlib\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"%matplotlib inline\r\n",
							"\r\n",
							"sns.set_style('darkgrid')\r\n",
							"matplotlib.rcParams['font.size'] = 14\r\n",
							"matplotlib.rcParams['figure.figsize'] = (9, 5)\r\n",
							"matplotlib.rcParams['figure.facecolor'] = '#00000000'"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<mark>Calculate total exports of goods and services by each country using python matplotlib</mark>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"\r\n",
							"def plot_total_exports(df, title=\"Total Exports of Goods and Services by Country\"):\r\n",
							"    \"\"\"Calculates and plots total exports using matplotlib.\r\n",
							"\r\n",
							"    Args:\r\n",
							"        df: Pandas DataFrame with 'Country' and 'Exports_of_goods_and_services' columns.\r\n",
							"        title: Title for the plot.\r\n",
							"\r\n",
							"    Returns:\r\n",
							"        None. Displays the plot.  Prints an error message and returns if the input is invalid.\r\n",
							"    \"\"\"\r\n",
							"\r\n",
							"    if not isinstance(df, pd.DataFrame):\r\n",
							"        print(\"Error: Input must be a Pandas DataFrame.\")\r\n",
							"        return\r\n",
							"\r\n",
							"    if 'Exports_of_goods_and_services' not in df.columns or 'Country' not in df.columns:\r\n",
							"        print(\"Error: DataFrame must contain 'Country' and 'Exports_of_goods_and_services' columns.\")\r\n",
							"        return\r\n",
							"\r\n",
							"    try:\r\n",
							"        total_exports = df.groupby('Country')['Exports_of_goods_and_services'].sum().reset_index()\r\n",
							"        total_exports = total_exports.sort_values('Exports_of_goods_and_services', ascending=False)\r\n",
							"\r\n",
							"        plt.figure(figsize=(12, 6))  # Adjust figure size for better readability\r\n",
							"        plt.bar(total_exports['Country'], total_exports['Exports_of_goods_and_services'])\r\n",
							"        plt.xlabel(\"Country\", fontsize=12)\r\n",
							"        plt.ylabel(\"Total Exports\", fontsize=12)\r\n",
							"        plt.title(title, fontsize=14)\r\n",
							"        plt.xticks(rotation=45, ha='right', fontsize=10)  # Rotate x-axis labels for readability\r\n",
							"        plt.tight_layout() # Adjust layout to prevent labels from overlapping\r\n",
							"        plt.show()\r\n",
							"\r\n",
							"    except Exception as e:\r\n",
							"        print(f\"An error occurred during calculation or plotting: {e}\")\r\n",
							"        return\r\n",
							"\r\n",
							"\r\n",
							"# Example usage (replace with your actual data loading):\r\n",
							"try:\r\n",
							"    df = pd.read_csv(\"your_data.csv\")  # Replace \"your_data.csv\" with your file path\r\n",
							"    plot_total_exports(df) # Call the function to plot the data\r\n",
							"\r\n",
							"    # Example with custom title:\r\n",
							"    plot_total_exports(df, title=\"Global Exports by Country (USD)\")\r\n",
							"\r\n",
							"\r\n",
							"except FileNotFoundError:\r\n",
							"    print(\"Error: CSV file not found. Please provide a valid file path.\")\r\n",
							"except Exception as e:\r\n",
							"    print(f\"An error occurred: {e}\")\r\n",
							"\r\n",
							"# Example with sample data (for testing):\r\n",
							"data = [\r\n",
							"    {'Country': 'USA', 'Exports_of_goods_and_services': 1000},\r\n",
							"    {'Country': 'Canada', 'Exports_of_goods_and_services': 500},\r\n",
							"    {'Country': 'USA', 'Exports_of_goods_and_services': 1200},\r\n",
							"    {'Country': 'Mexico', 'Exports_of_goods_and_services': 700},\r\n",
							"    {'Country': 'Japan', 'Exports_of_goods_and_services': 900},\r\n",
							"    {'Country': 'Germany', 'Exports_of_goods_and_services': 1100},\r\n",
							"    {'Country': 'UK', 'Exports_of_goods_and_services': 800},\r\n",
							"    {'Country': 'France', 'Exports_of_goods_and_services': 600},\r\n",
							"    {'Country': 'China', 'Exports_of_goods_and_services': 1300}\r\n",
							"]\r\n",
							"\r\n",
							"df_sample = pd.DataFrame(data)\r\n",
							"plot_total_exports(df_sample, title=\"Sample Exports Data\") # Plot the sample data\r\n",
							"\r\n",
							"\r\n",
							"# Example of error handling:\r\n",
							"empty_df = pd.DataFrame()\r\n",
							"plot_total_exports(empty_df)  # Will print error message\r\n",
							"\r\n",
							"invalid_df = pd.DataFrame({'Country': ['USA', 'Canada'], 'SomeOtherColumn': [1, 2]})\r\n",
							"plot_total_exports(invalid_df) # Will print error message\r\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<mark>Show countries construction year using seaborn</mark>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd\r\n",
							"import seaborn as sns\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"\r\n",
							"def plot_construction_years(df, title=\"Construction Years by Country\"):\r\n",
							"    \"\"\"Plots construction years by country using Seaborn.\r\n",
							"\r\n",
							"    Args:\r\n",
							"        df: Pandas DataFrame with 'Country' and 'Construction_ISIC_F' columns.\r\n",
							"        title: Title for the plot.\r\n",
							"\r\n",
							"    Returns:\r\n",
							"        None. Displays the plot.  Prints an error message and returns if the input is invalid.\r\n",
							"    \"\"\"\r\n",
							"\r\n",
							"    if not isinstance(df, pd.DataFrame):\r\n",
							"        print(\"Error: Input must be a Pandas DataFrame.\")\r\n",
							"        return\r\n",
							"\r\n",
							"    if 'Construction_ISIC_F' not in df.columns or 'Country' not in df.columns:\r\n",
							"        print(\"Error: DataFrame must contain 'Country' and 'Construction_ISIC_F' columns.\")\r\n",
							"        return\r\n",
							"\r\n",
							"    try:\r\n",
							"        plt.figure(figsize=(12, 6))  # Adjust figure size as needed\r\n",
							"        sns.countplot(x='Country', data=df, hue='Construction_ISIC_F') # Use countplot for categorical data\r\n",
							"        plt.xlabel(\"Country\", fontsize=12)\r\n",
							"        plt.ylabel(\"Count\", fontsize=12)\r\n",
							"        plt.title(title, fontsize=14)\r\n",
							"        plt.xticks(rotation=45, ha='right', fontsize=10)\r\n",
							"        plt.tight_layout()\r\n",
							"        plt.show()\r\n",
							"\r\n",
							"    except Exception as e:\r\n",
							"        print(f\"An error occurred during plotting: {e}\")\r\n",
							"        return\r\n",
							"\r\n",
							"\r\n",
							"# Example usage (replace with your actual data loading):\r\n",
							"try:\r\n",
							"    df = pd.read_csv(\"your_data.csv\")  # Replace \"your_data.csv\" with your file path\r\n",
							"    plot_construction_years(df)\r\n",
							"\r\n",
							"    # Example with custom title:\r\n",
							"    plot_construction_years(df, title=\"Construction Activity by Country\")\r\n",
							"\r\n",
							"except FileNotFoundError:\r\n",
							"    print(\"Error: CSV file not found. Please provide a valid file path.\")\r\n",
							"except Exception as e:\r\n",
							"    print(f\"An error occurred: {e}\")\r\n",
							"\r\n",
							"\r\n",
							"# Example with sample data (for testing):\r\n",
							"data = [\r\n",
							"    {'Country': 'USA', 'Construction_ISIC_F': 2020},\r\n",
							"    {'Country': 'Canada', 'Construction_ISIC_F': 2020},\r\n",
							"    {'Country': 'USA', 'Construction_ISIC_F': 2021},\r\n",
							"    {'Country': 'Mexico', 'Construction_ISIC_F': 2020},\r\n",
							"    {'Country': 'USA', 'Construction_ISIC_F': 2022},\r\n",
							"    {'Country': 'Canada', 'Construction_ISIC_F': 2021},\r\n",
							"    {'Country': 'Mexico', 'Construction_ISIC_F': 2021},\r\n",
							"    {'Country': 'Japan', 'Construction_ISIC_F': 2022},\r\n",
							"    {'Country': 'Germany', 'Construction_ISIC_F': 2021},\r\n",
							"    {'Country': 'UK', 'Construction_ISIC_F': 2020},\r\n",
							"    {'Country': 'France', 'Construction_ISIC_F': 2022},\r\n",
							"    {'Country': 'China', 'Construction_ISIC_F': 2020}\r\n",
							"]\r\n",
							"\r\n",
							"df_sample = pd.DataFrame(data)\r\n",
							"plot_construction_years(df_sample, title=\"Sample Construction Data\")\r\n",
							"\r\n",
							"\r\n",
							"# Example of error handling:\r\n",
							"empty_df = pd.DataFrame()\r\n",
							"plot_construction_years(empty_df)  # Will print error message\r\n",
							"\r\n",
							"invalid_df = pd.DataFrame({'Country': ['USA', 'Canada'], 'SomeOtherColumn': [1, 2]})\r\n",
							"plot_construction_years(invalid_df) # Will print error message"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<mark>Show Population growth for countries for last 50 years using linechart</mark>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"\r\n",
							"# Sample Data (REPLACE THIS WITH YOUR ACTUAL DATA)\r\n",
							"data = {'Country': ['USA', 'Canada', 'UK', 'Germany', 'Japan'],\r\n",
							"        '1973': [210, 22, 56, 78, 108],  # Population in millions\r\n",
							"        '1983': [235, 25, 58, 80, 110],\r\n",
							"        '1993': [260, 28, 60, 82, 115],\r\n",
							"        '2003': [285, 32, 63, 83, 120],\r\n",
							"        '2013': [310, 35, 65, 84, 125],\r\n",
							"        '2023': [335, 38, 68, 83, 125]}\r\n",
							"df = pd.DataFrame(data).set_index('Country') # Set 'Country' as index\r\n",
							"\r\n",
							"# Transpose the DataFrame to have years as rows and countries as columns\r\n",
							"df_transposed = df.T\r\n",
							"\r\n",
							"# Plotting the line chart\r\n",
							"plt.figure(figsize=(12, 6))\r\n",
							"for country in df.index:\r\n",
							"    plt.plot(df_transposed.index, df_transposed[country], label=country)\r\n",
							"\r\n",
							"plt.xlabel('Year')\r\n",
							"plt.ylabel('Population (Millions)')\r\n",
							"plt.title('Population Growth Over 50 Years')\r\n",
							"plt.legend()\r\n",
							"plt.grid(True)\r\n",
							"plt.tight_layout()\r\n",
							"plt.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"<mark>show country by gross national income in USD and imports goods and services for year 2020 using histogram </mark>\r\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"import seaborn as sns  # For nicer plots\r\n",
							"\r\n",
							"# Sample Data (REPLACE THIS WITH YOUR ACTUAL DATA)\r\n",
							"data = {'Country': ['USA', 'Canada', 'UK', 'Germany', 'Japan', 'France', 'Australia', 'Brazil', 'India', 'China'],\r\n",
							"        'GNI': [65000, 50000, 45000, 52000, 48000, 47000, 55000, 15000, 2000, 12000],\r\n",
							"        'Imports': [25000, 18000, 20000, 22000, 19000, 17000, 21000, 8000, 1000, 5000]}\r\n",
							"df = pd.DataFrame(data)\r\n",
							"\r\n",
							"# 1. Scatter Plot (Recommended for two variables)\r\n",
							"plt.figure(figsize=(10, 6))  # Adjust figure size for better readability\r\n",
							"sns.scatterplot(x='GNI', y='Imports', data=df, hue='Country', s=50) # Hue adds color by country, s changes marker size\r\n",
							"plt.title('GNI vs. Imports (2020)')\r\n",
							"plt.xlabel('Gross National Income (USD)')\r\n",
							"plt.ylabel('Imports of Goods and Services (USD)')\r\n",
							"plt.grid(True)  # Add a grid for better visualization\r\n",
							"plt.tight_layout() # Adjust layout to prevent labels from overlapping\r\n",
							"#plt.legend(loc='upper left', bbox_to_anchor=(1,1)) # Place the legend outside the plot\r\n",
							"plt.show()\r\n",
							"\r\n",
							"# 2. 2D Histogram / Heatmap (Alternative for showing density)\r\n",
							"plt.figure(figsize=(10, 6))\r\n",
							"plt.hist2d(df['GNI'], df['Imports'], bins=(10,10), cmap='viridis') # Adjust bins for resolution\r\n",
							"plt.colorbar(label='Number of Countries')  # Add a colorbar\r\n",
							"plt.title('2D Histogram of GNI and Imports (2020)')\r\n",
							"plt.xlabel('Gross National Income (USD)')\r\n",
							"plt.ylabel('Imports of Goods and Services (USD)')\r\n",
							"plt.tight_layout()\r\n",
							"plt.show()\r\n",
							"\r\n",
							"\r\n",
							"# 3. Separate Histograms (If you want to look at distributions individually)\r\n",
							"plt.figure(figsize=(12, 5))\r\n",
							"\r\n",
							"plt.subplot(1, 2, 1) # 1 row, 2 columns, first plot\r\n",
							"sns.histplot(df['GNI'], kde=True) # KDE adds a Kernel Density Estimate\r\n",
							"plt.title('Distribution of GNI')\r\n",
							"\r\n",
							"plt.subplot(1, 2, 2) # 1 row, 2 columns, second plot\r\n",
							"sns.histplot(df['Imports'], kde=True)\r\n",
							"plt.title('Distribution of Imports')\r\n",
							"\r\n",
							"plt.tight_layout()\r\n",
							"plt.show()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<mark>Show max GDP for last 50 years per country using barchart</mark>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"import seaborn as sns  # For nicer plots\r\n",
							"\r\n",
							"# Sample Data (REPLACE THIS WITH YOUR ACTUAL DATA)\r\n",
							"data = {'Country': ['USA', 'Canada', 'UK', 'Germany', 'Japan', 'France', 'Australia', 'Brazil', 'India', 'China'],\r\n",
							"        '1973': [10000, 4000, 5000, 6000, 7000, 5500, 4500, 2000, 800, 1500],\r\n",
							"        '1983': [12000, 4500, 5500, 7000, 8000, 6000, 5000, 2500, 1000, 2000],\r\n",
							"        '1993': [15000, 5000, 6000, 8000, 9000, 7000, 6000, 3000, 1200, 3000],\r\n",
							"        '2003': [18000, 6000, 7000, 9000, 10000, 8000, 7000, 4000, 1500, 5000],\r\n",
							"        '2013': [22000, 7000, 8000, 10000, 11000, 9000, 8000, 5000, 2000, 8000],\r\n",
							"        '2023': [25000, 8000, 9000, 11000, 12000, 10000, 9000, 6000, 2500, 12000]}\r\n",
							"df = pd.DataFrame(data).set_index('Country')\r\n",
							"\r\n",
							"# Find the maximum GDP for each country\r\n",
							"max_gdp = df.max(axis=1)\r\n",
							"\r\n",
							"# Plotting the bar chart\r\n",
							"plt.figure(figsize=(12, 6))\r\n",
							"sns.barplot(x=max_gdp.index, y=max_gdp.values)  # Use seaborn for better styling\r\n",
							"plt.xlabel('Country')\r\n",
							"plt.ylabel('Maximum GDP')\r\n",
							"plt.title('Maximum GDP per Country (Last 50 Years)')\r\n",
							"plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability if needed\r\n",
							"plt.tight_layout()\r\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 22
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GlobaleconomyDB')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "GlobaleconomyDB",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://global-economy-indicators-data@globaleconomyindicators.dfs.core.windows.net/GlobaleconomyDB",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "global-economy-indicator-sa-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "757ab9d7-9280-4871-a505-d7ebc05172eb"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "indicators",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "GlobaleconomyDB",
								"DatabaseId": null
							},
							"Partitioning": {
								"PartitionFunctionType": null,
								"Keys": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "CountryID",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "Country",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "Year",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "AMA_exchange_rate",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "IMF_based_exchange_rate",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Population",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "Currency",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "Per_capita_GNI",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "Agriculture_hunting_forestry_fishing_ISIC_AB",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Changes_in_inventories",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Construction_ISIC_F",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Exports_of_goods_and_services",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Final_consumption_expenditure",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "General_government_final_consumption_expenditure",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Gross_capital_formation",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Gross_fixed_capital_formation_including_Acquisitions_less_disposals_of_valuables",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Household_consumption_expenditure_including_Non_profit_institutions_serving_households",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Imports_of_goods_and_services",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Manufacturing_ISIC_D",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Mining_Manufacturing_Utilities_ISIC_C_E",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Other_Activities_ISIC_J_P",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Total_Value_Added",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Transport_storage_and_communication_ISIC_I",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Wholesale_retail_trade_restaurants_and_hotels_ISIC_G_H",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Gross_National_Income_GNI_in_USD",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "Gross_Domestic_Product_GDP",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									}
								],
								"ColumnSetEntityName": "5c4dcac1-c1aa-4eac-a507-336572b2fac8",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://global-economy-indicators-data@globaleconomyindicators.dfs.core.windows.net/transformed-data/indicators/part-00000-tid-8109756532729835153-e7d859b9-b48c-4a03-97c5-1c9192507ce4-6-1-c000.csv",
										"delimiter": ",",
										"firstRowAsHeader": "true",
										"multiLine": "false",
										"serialization.format": "1",
										"FormatTypeSetToDatabaseDefault": false,
										"header": "true"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://global-economy-indicators-data@globaleconomyindicators.dfs.core.windows.net/transformed-data/indicators/part-00000-tid-8109756532729835153-e7d859b9-b48c-4a03-97c5-1c9192507ce4-6-1-c000.csv",
									"Properties": {
										"LinkedServiceName": "global-economy-indicator-sa-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "csv",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"CountryID\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Country\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Year\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AMA_exchange_rate\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IMF_based_exchange_rate\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Population\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Currency\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Per_capita_GNI\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Agriculture_hunting_forestry_fishing_ISIC_AB\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Changes_in_inventories\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Construction_ISIC_F\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Exports_of_goods_and_services\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Final_consumption_expenditure\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"General_government_final_consumption_expenditure\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Gross_capital_formation\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Gross_fixed_capital_formation_including_Acquisitions_less_disposals_of_valuables\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Household_consumption_expenditure_including_Non_profit_institutions_serving_households\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Imports_of_goods_and_services\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Manufacturing_ISIC_D\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Mining_Manufacturing_Utilities_ISIC_C_E\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Other_Activities_ISIC_J_P\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Total_Value_Added\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Transport_storage_and_communication_ISIC_I\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Wholesale_retail_trade_restaurants_and_hotels_ISIC_G_H\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Gross_National_Income_GNI_in_USD\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Gross_Domestic_Product_GDP\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "581df9c6-4483-4717-a3f7-008a0793273d",
							"Description": ""
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/internship')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}